import { useAuthStore } from "../store/auth";
import { useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { useFetchUserData } from "../hooks/useFetchUserData";
import TelegramLogin from "../components/TelegramLogin";
import { subscribeTelegram } from "../api/auth/userSettings";
import "../styles/Dashboard.css";

export default function Dashboard() {
  const username = useAuthStore((state) => state.username);
  const fullName = useAuthStore((state) => state.fullName);
  const avatar = useAuthStore((state) => state.avatar);
  const telegramId = useAuthStore((state) => state.telegramId);
  const setTelegramId = useAuthStore((state) => state.setTelegramId);

  const [loading, setLoading] = useState(true);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  useFetchUserData();

  useEffect(() => {
    const timeout = setTimeout(() => setLoading(false), 1000);
    return () => clearTimeout(timeout);
  }, []);

  const handleTelegramLinkSuccess = async (telegramId: string) => {
    try {
      await subscribeTelegram(username!, telegramId);
      setTelegramId(telegramId);
      setSuccessMessage("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!");
      setTimeout(() => setSuccessMessage(null), 3000);
    } catch (error: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram:", error);
      setErrorMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram");
      setTimeout(() => setErrorMessage(null), 3000);
    }
  };

  return (
    <div className="dashboard-container">
      <div className="dashboard-content">
        <h1 className="dashboard-title">üìå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dashboard</h1>
        {loading ? (
          <p className="dashboard-loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</p>
        ) : (
          <>
            {avatar && (
              <img src={avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="dashboard-avatar" />
            )}
            {fullName && (
              <p className="dashboard-name">üßë‚Äçüíº –§–ò–û: {fullName}</p>
            )}
            <p className="dashboard-username">üë§ –õ–æ–≥–∏–Ω: {username}</p>

            {telegramId ? (
              <p className="dashboard-telegram">üì± Telegram ID: {telegramId}</p>
            ) : (
              <>
                <p className="dashboard-error">‚ùå Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω</p>
                <p className="dashboard-hint">
                  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –±–æ—Ç—É –≤ Telegram –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
                </p>
                <TelegramLogin onSuccess={handleTelegramLinkSuccess} />
              </>
            )}

            {successMessage && <p className="dashboard-success">{successMessage}</p>}
            {errorMessage && <p className="dashboard-error">{errorMessage}</p>}
          </>
        )}
      </div>
    </div>
  );
}
