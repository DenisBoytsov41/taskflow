import { useAuthStore } from "../store/auth";
import { useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { getUserInfo, refreshAccessToken, restoreSession } from "../api/auth";
import TelegramLogin from "../components/TelegramLogin";
import "../styles/Dashboard.css";

export default function Dashboard() {
  const token = useAuthStore((state) => state.token);
  const setToken = useAuthStore((state) => state.setToken);
  const username = useAuthStore((state) => state.username);
  const setUsername = useAuthStore((state) => state.setUsername);
  const telegramId = useAuthStore((state) => state.telegramId);
  const setTelegramId = useAuthStore((state) => state.setTelegramId);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        let accessToken = token || localStorage.getItem("token");
        let storedUsername = username || localStorage.getItem("username");

        if (!accessToken) {
          console.log("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...");

          try {
            if (!storedUsername) {
              throw new Error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage.");
            }

            accessToken = await restoreSession();
            if (accessToken) {
              console.log("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            } else {
              console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...");
              accessToken = await refreshAccessToken();
            }

            if (accessToken) {
              setToken(accessToken);
              localStorage.setItem("token", accessToken);
            } else {
              throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");
            }
          } catch (error) {
            console.warn("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.");
            navigate("/login");
            return;
          }
        }

        const userData = await getUserInfo();

        if (userData?.data?.username) {
          setUsername(userData.data.username);
          localStorage.setItem("username", userData.data.username);
        }

        if (userData?.data?.telegram_id) {
          setTelegramId(userData.data.telegram_id);
          localStorage.setItem("telegramId", userData.data.telegram_id);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        navigate("/login");
      } finally {
        setLoading(false);
      }
    };

    fetchUserData(); 

    const interval = setInterval(fetchUserData, 3000);

    return () => clearInterval(interval); 
  }, [token, username, setToken, setUsername, setTelegramId, navigate]);

  return (
    <div className="dashboard-container">
      <div className="dashboard-content">
        <h1 className="dashboard-title">üìå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dashboard</h1>
        {loading ? (
          <p className="dashboard-loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</p>
        ) : (
          <>
            <p className="dashboard-username">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}</p>
            {telegramId ? (
              <p className="dashboard-telegram">üì± –í–∞—à Telegram ID: {telegramId}</p>
            ) : (
              <>
                <p className="dashboard-error">‚ùå Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω</p>
                <p className="dashboard-hint">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/start</code> –±–æ—Ç—É –≤ Telegram –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</p>
                <TelegramLogin />
              </>
            )}
          </>
        )}
      </div>
    </div>
  );
}
