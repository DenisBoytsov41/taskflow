import { useEffect, useState } from "react";
import { useAuthStore } from "../store/auth";
import { linkTelegram, getUserInfo } from "../api/auth";
import { useNavigate } from "react-router-dom";
import "../styles/LinkTelegram.css";

export default function LinkTelegram() {
  const username = useAuthStore((state) => state.username);
  const setTelegramId = useAuthStore((state) => state.setTelegramId);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!username) {
      console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login.");
      navigate("/login");
      return;
    }

    const checkExistingTelegram = async () => {
      try {
        console.log("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram...");
        const userData = await getUserInfo();

        if (userData?.data?.telegram_id) {
          console.log("‚úÖ Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω:", userData.data.telegram_id);
          setTelegramId(userData.data.telegram_id);
          localStorage.setItem("telegramId", userData.data.telegram_id);
          navigate("/dashboard");
          return;
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram ID:", error);
      }

      const params = new URLSearchParams(window.location.search);
      const telegramId = params.get("id");

      if (!telegramId) {
        console.warn("‚ö†Ô∏è Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL.");
        setError("Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        setLoading(false);
        return;
      }

      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π Telegram ID –∏–∑ URL:", telegramId);
      setLoading(true);

      try {
        console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É Telegram...");
        await linkTelegram(username, telegramId);
        console.log("‚úÖ Telegram ID –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ:", telegramId);

        setTelegramId(telegramId);
        localStorage.setItem("telegramId", telegramId);

        alert("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!");

        console.log("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
        const updatedUserData = await getUserInfo();

        if (updatedUserData?.data?.telegram_id) {
          console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", updatedUserData.data.telegram_id);
          setTelegramId(updatedUserData.data.telegram_id);
          localStorage.setItem("telegramId", updatedUserData.data.telegram_id);
        } else {
          console.warn("‚ö†Ô∏è Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.");
        }

        navigate("/dashboard");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram:", error);
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      } finally {
        setLoading(false);
      }
    };

    checkExistingTelegram();
  }, [username, setTelegramId, navigate]);

  return (
    <div className="link-telegram-container">
      <h2 className="link-telegram-title">üîó –ü—Ä–∏–≤—è–∑–∫–∞ Telegram</h2>
      {loading ? (
        <p className="loading">üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</p>
      ) : error ? (
        <p className="error">{error}</p>
      ) : (
        <p className="success">‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</p>
      )}
    </div>
  );
}
