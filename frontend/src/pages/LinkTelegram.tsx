import { useEffect, useState } from "react";
import { useAuthStore } from "../store/auth";
import { linkTelegram } from "../api/auth";
import { useNavigate } from "react-router-dom";

export default function LinkTelegram() {
  const username = useAuthStore((state) => state.username);
  const setTelegramId = useAuthStore((state) => state.setTelegramId);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!username) {
      console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login.");
      navigate("/login");
      return;
    }

    const params = new URLSearchParams(window.location.search);
    const telegramId = params.get("id");

    if (telegramId) {
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π Telegram ID:", telegramId);
      setLoading(true);

      linkTelegram(username, telegramId)
        .then(() => {
          setTelegramId(telegramId);
          alert("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!");
          navigate("/dashboard");
        })
        .catch((error) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram:", error);
        })
        .finally(() => {
          setLoading(false);
        });
    } else {
      console.warn("‚ö†Ô∏è Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL.");
      setLoading(false);
    }
  }, [username, setTelegramId, navigate]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold">–ü—Ä–∏–≤—è–∑–∫–∞ Telegram</h2>
      {loading ? (
        <p className="text-gray-500 animate-pulse">üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</p>
      ) : (
        <p className="text-red-500">‚ö†Ô∏è Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.</p>
      )}
    </div>
  );
}
