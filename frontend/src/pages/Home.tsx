import { useEffect, useState } from "react";
import { useAuthStore } from "../store/auth";
import { useNavigate } from "react-router-dom";
import { getUserInfo, refreshAccessToken, restoreSession } from "../api/auth";
import "../styles/Home.css";

export default function Home() {
  const token = useAuthStore((state) => state.token);
  const setToken = useAuthStore((state) => state.setToken);
  const username = useAuthStore((state) => state.username);
  const setUsername = useAuthStore((state) => state.setUsername);
  const telegramId = useAuthStore((state) => state.telegramId);
  const setTelegramId = useAuthStore((state) => state.setTelegramId);
  const logout = useAuthStore((state) => state.logout);
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        let accessToken = token || localStorage.getItem("token");
        let storedUsername = username || localStorage.getItem("username");

        if (!accessToken) {
          console.log("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...");

          try {
            if (!storedUsername) {
              throw new Error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ localStorage.");
            }

            accessToken = await restoreSession();
            if (accessToken) {
              console.log("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            } else {
              console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...");
              accessToken = await refreshAccessToken();
            }

            if (accessToken) {
              setToken(accessToken);
              localStorage.setItem("token", accessToken);
            } else {
              throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");
            }
          } catch (error) {
            console.warn("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥.");
            handleLogout();
            return;
          }
        }

        const userData = await getUserInfo();

        if (userData?.data?.username) {
          setUsername(userData.data.username);
          localStorage.setItem("username", userData.data.username);
        }

        if (userData?.data?.telegram_id) {
          setTelegramId(userData.data.telegram_id);
          localStorage.setItem("telegramId", userData.data.telegram_id);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        handleLogout();
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [token, username, setToken, setUsername, setTelegramId, navigate]);

  const handleLogout = () => {
    console.log("–í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥...");
    logout();
    localStorage.removeItem("token");
    localStorage.removeItem("username");
    localStorage.removeItem("telegramId");
    navigate("/login");
  };

  return (
    <div className="home-container">
      <h1 className="home-title">üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Project Manager</h1>

      {loading ? (
        <p className="home-loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</p>
      ) : token ? (
        <>
          <p className="home-text">‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.</p>
          <p className="home-username">üë§ –í–∞—à –ª–æ–≥–∏–Ω: {username}</p>
          {telegramId && <p className="home-telegram">üì± –í–∞—à Telegram ID: {telegramId}</p>}

          <button className="home-button logout" onClick={handleLogout}>
            üö™ –í—ã–π—Ç–∏
          </button>
        </>
      ) : (
        <>
          <p className="home-text">üîë –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.</p>

          <div className="home-buttons">
            <button className="home-button login" onClick={() => navigate("/login")}>
              üîë –í–æ–π—Ç–∏
            </button>
            <button className="home-button register" onClick={() => navigate("/register")}>
              üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </div>
        </>
      )}
    </div>
  );
}
