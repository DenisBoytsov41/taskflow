import { API_BACKEND_URL } from "../config";
import { useAuthStore } from "../store/auth";

export const login = async (username: string, password: string) => {
  try {
    const response = await fetch(`${API_BACKEND_URL}/users/login`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    if (!response.ok) {
      throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    }

    const responseData = await response.json();
    const accessToken = responseData.data?.access_token;

    if (!accessToken) {
      throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Access Token");
    }

    localStorage.setItem("token", accessToken);
    localStorage.setItem("username", username);
    return accessToken;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
    throw error;
  }
};

export const register = async (username: string, password: string) => {
  try {
    const response = await fetch(`${API_BACKEND_URL}/users/register`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, password }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }

    const responseData = await response.json();
    const accessToken = responseData.data?.access_token;

    if (!accessToken) {
      throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Access Token");
    }

    localStorage.setItem("token", accessToken);
    localStorage.setItem("username", username);
    return accessToken;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
};

export const linkTelegram = async (username: string, telegramId: string) => {
  try {
    const response = await fetch(`${API_BACKEND_URL}/users/subscribe`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username, telegram_id: telegramId }),
    });

    if (!response.ok) {
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram");
    }

    return await response.json();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram:", error);
    throw error;
  }
};

export const refreshAccessToken = async () => {
  try {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access Token...");

    const username = localStorage.getItem("username");
    if (!username) {
      console.warn("‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.");
      throw new Error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    }

    const response = await fetch(`${API_BACKEND_URL}/users/refresh`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username }),
    });

    if (!response.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ö–æ–¥:", response.status);
      if (response.status === 401) {
        console.warn("‚ö†Ô∏è Refresh Token –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥.");
        logout();
      }
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞");
    }

    const responseData = await response.json();
    const newAccessToken = responseData.data?.access_token;

    if (!newAccessToken) {
      throw new Error("‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Access Token");
    }

    localStorage.setItem("token", newAccessToken);
    return newAccessToken;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
    throw error;
  }
};

export const restoreSession = async () => {
  try {
    console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...");

    const username = localStorage.getItem("username");
    if (!username) {
      console.warn("‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.");
      throw new Error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    }

    const response = await fetch(`${API_BACKEND_URL}/users/restore-session`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username }),
    });

    if (!response.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ö–æ–¥:", response.status);
      if (response.status === 403) {
        console.warn("‚ö†Ô∏è –í—Ö–æ–¥ —Å –Ω–æ–≤–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.");
      }
      throw new Error("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏");
    }

    const responseData = await response.json();
    const newAccessToken = responseData.data?.access_token;

    if (!newAccessToken) {
      throw new Error("‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Access Token");
    }

    localStorage.setItem("token", newAccessToken);
    return newAccessToken;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:", error);
    throw error;
  }
};

export const getUserInfo = async () => {
  let accessToken = localStorage.getItem("token");

  const fetchUserInfo = async (token: string) => {
    try {
      const response = await fetch(`${API_BACKEND_URL}/users/me`, {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      });

      if (response.ok) {
        return await response.json();
      }

      if (response.status === 401) {
        console.warn("‚ö†Ô∏è Access Token –∏—Å—Ç–µ–∫. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        accessToken = await refreshAccessToken();
        if (accessToken) {
          return fetchUserInfo(accessToken);
        }
      }

      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
      throw error;
    }
  };

  if (!accessToken) {
    throw new Error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
  }

  return fetchUserInfo(accessToken);
};

export const logout = async (username?: string) => {
  try {
    const user = username || localStorage.getItem("username");
    if (!user) {
      console.warn("‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥.");
    } else {
      console.log("üö™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);
      await fetch(`${API_BACKEND_URL}/users/logout`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: user }),
      });
    }

    localStorage.removeItem("token");
    localStorage.removeItem("username");
    localStorage.removeItem("telegramId");

    useAuthStore.getState().logout();
    console.log("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
    throw error;
  }
};
