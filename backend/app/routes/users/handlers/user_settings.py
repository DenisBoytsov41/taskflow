from fastapi import APIRouter, Request, Depends
from sqlalchemy.orm import Session
from app.auth import get_db, get_current_user, get_password_hash
from app.models import User
from app.responses import (
    success_response,
    bad_request_response,
    deleted_response,
    internal_error_response
)
from app.utils.crypto import decrypt_password
from loguru import logger

router = APIRouter()


@router.get("/profile")
def get_profile(user: User = Depends(get_current_user)):
    try:
        return success_response({
            "username": user.username,
            "telegram_id": user.telegram_id,
            "full_name": user.full_name,
            "avatar": user.avatar_url
        }, "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        logger.error(f"[GET /profile] –û—à–∏–±–∫–∞: {e}")
        return internal_error_response("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.patch("/update-fullname")
def update_full_name(data: dict, db: Session = Depends(get_db), user: User = Depends(get_current_user)):
    full_name = data.get("full_name")
    if not full_name:
        return bad_request_response("–ü–æ–ª–µ full_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

    try:
        user.full_name = full_name
        db.commit()
        return success_response({}, "–§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"[PATCH /update-fullname] –û—à–∏–±–∫–∞: {e}")
        return internal_error_response("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –§–ò–û")


@router.patch("/update-avatar")
def update_avatar(data: dict, db: Session = Depends(get_db), user: User = Depends(get_current_user)):
    avatar_base64 = data.get("avatar")
    if not avatar_base64:
        return bad_request_response("–ü–æ–ª–µ avatar –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

    try:
        user.avatar_url = avatar_base64
        db.commit()
        return success_response(
            {"avatar": user.avatar_url},
            "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω"
        )
    except Exception as e:
        logger.error(f"[PATCH /update-avatar] –û—à–∏–±–∫–∞: {e}")
        return internal_error_response("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")


@router.patch("/change-password")
async def change_password(
    request: Request,
    db: Session = Depends(get_db),
    user: User = Depends(get_current_user)
):
    try:
        data = await request.json()
        encrypted_password = data.get("password")

        if not encrypted_password:
            return bad_request_response("–ü–æ–ª–µ 'password' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

        try:
            decrypted_password = decrypt_password(encrypted_password)
        except Exception as e:
            logger.error(f"[change-password] –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è: {e}")
            return bad_request_response("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")

        hashed_password = get_password_hash(decrypted_password)
        user.password_hash = hashed_password
        db.commit()

        logger.info(f"üîê [change-password] –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –æ–±–Ω–æ–≤–ª—ë–Ω")
        return success_response({}, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")

    except Exception as e:
        logger.error(f"[PATCH /change-password] –û—à–∏–±–∫–∞: {e}")
        return internal_error_response("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è")


@router.delete("/delete-profile")
def delete_profile(db: Session = Depends(get_db), user: User = Depends(get_current_user)):
    try:
        db.delete(user)
        db.commit()
        return deleted_response("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"[DELETE /delete-profile] –û—à–∏–±–∫–∞: {e}")
        return internal_error_response("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
